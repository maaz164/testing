import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
from selenium.webdriver.common.alert import Alert
import pandas as pd
import win32com.client as win32

def test_incident(data):
    try:
        incident_number = data["incidentNo"]
        options = Options()
        options.add_argument("--window-size=1920,1080")
        driver = webdriver.Chrome(options=options)
        driver.maximize_window()
        url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
        driver.get(url)
        time.sleep(10)
        print(f"Navigated to incident number: {incident_number}")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "gsft_main"))
        )
        driver.switch_to.frame("gsft_main")  
        print("found")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "incident.description"))
        )
        description_element = driver.find_element(By.ID, "incident.description")
        textarea_value = description_element.get_attribute("value")
        print("Description:", textarea_value)

        scenario_id_pattern = r"SCENARIO_ID\s*=\s*(\d+)"
        match = re.search(scenario_id_pattern, textarea_value)
       
        if match:
            scenario_id = match.group(1)
            print(f"Found SCENARIO_ID: {scenario_id}")

            table1_data, table2_data = execute_sql_query(scenario_id)
           
        else:
            print("No SCENARIO_ID found in the description.")
            # Prompt the user for SCENARIO_ID
            driver.execute_script("alert('Please enter the SCENARIO_ID');")
            alert = Alert(driver)
            scenario_id = alert.text
            alert.accept()
            print(f"User provided SCENARIO_ID: {scenario_id}")
            table1_data, table2_data = execute_sql_query(scenario_id)
            
        # if len(table1_data) == 0:
        #    print("table data is empty")
        #    table1_data.append({
        #        "GEARID":"5219",
        #        "ResolutionSOPID":"Assign to L2"
        #    })

        # Save table1_data to an Excel file
        if len(table1_data[0])>=1:
            save_to_excel(table1_data, "table1_data.xlsx")

            # Send the Excel file via email
            subject = "Table1 Data"
            body = "Please find the attached file containing Table1 data."
            to = "Shubhamsunil.Payghan@aig.com"
            attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
            send_email_with_attachment(subject, body, to, attachment_path)

    except Exception as e:
        print(f"An error occurred: {e}")
        table1_data, table2_data = [], []
    finally:
        driver.quit()
        if len(table1_data[0]) == 0:
            print("table data is empty")
            table1_data.pop()
            table1_data.append({
               "GEARID":"5219",
               "FilteredDiagnosticSOPID":"NA",
               "Boundarycond1":"NA",
               "Statevar1":"NA",
               "Boundarycond2":"NA",
               "Statevar2":"NA",
               "Boundarycond3":"NA",
               "Statevar3":"NA",
               "Boundarycond4":"NA",
               "Statevar4":"NA",
               "Boundarycond5":"NA",
               "Statevar5":"NA",
               "Boundarycond6":"NA",
               "Statevar6":"NA",
               "Boundarycond7":"NA",
               "Statevar7":"NA",
               "ResolutionSOPID":"Assign to L2"
        
           })
            save_to_excel(table1_data, "table1_data.xlsx")

            # Send the Excel file via email
            subject = "Table1 Data"
            body = "Please find the attached file containing Table1 data."
            to = "Shubhamsunil.Payghan@aig.com"
            attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
            send_email_with_attachment(subject, body, to, attachment_path)
        return table1_data, table2_data

def execute_sql_query(scenario_id):
    try:
        rsop_value = ""

        conn_str = (
            r'DRIVER={ODBC Driver 17 for SQL Server};'
            r'SERVER=PWGIDSGLSQ001,50110;'  
            r'DATABASE=GLMS_GPPolicy_Prod;'
            r'Trusted_Connection=yes;'
            r'Connection Timeout=60;'
            r'MultiSubnetFailover=yes;'
        )

        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        sql_query = f"SELECT SCENARIO_ID, DLTD_IN, POL_STAT_TYP FROM GLMS_GPPolicy_Prod..TBATCH_LOG WHERE SCENARIO_ID = {scenario_id};"
        cursor.execute(sql_query)

        result = cursor.fetchone()
       
        if result and result.DLTD_IN == 'Y' and result.POL_STAT_TYP == 'Canceled':
            print(result)
            rsop_value = execute_oracle_query(scenario_id)
        else:
            print("DLTD_IN IS NOT = Y AND POL_STAT_TYP IS NOT = CANCELED")

        cursor.close()
        conn.close()

    except pyodbc.Error as e:
        print(f"Database error: {e}")
        rsop_value = "error occurred"
       
    finally:
        rsop = list(SOP_Filtering.find({ "GEARID": 5219, "FilteredDiagnosticSOPID": "NAM_5219_PDI_UNBIND_REQUEST_DSOP"}, {"_id": 0}))
        for a in rsop:
            if a["ResolutionSOPID"] == rsop_value:
                a["highlight"] = "True"
            else:
                a["highlight"] = "False"
       
        highlighted_rsop = [a for a in rsop if a["highlight"] == "True"]
        if highlighted_rsop:
            highlighted_rsop = highlighted_rsop[0]
        else:
            highlighted_rsop = {}
       
        print(highlighted_rsop)
        return [highlighted_rsop], []  # Ensure the return value is always a list

def execute_oracle_query(scenario_id):
    try:
        os.environ['PATH'] = r'C:\Users\maahmad\Downloads\instantclient-basiclite-windows.x64-21.15.0.0.0dbru\instantclient_21_15' + ";" + os.environ['PATH']

        dsn_tns = cx_Oracle.makedsn('aigabec902-scan.r1-core.r1.aig.net', '1521', service_name='SGIGESP')
        connection = cx_Oracle.connect(user='MAAHMAD', password='EDAHCF9a=4b#CELI', dsn=dsn_tns)
       
        cursor = connection.cursor()

        query = f"""
        SELECT DIM_POL_ID, PRIOR_DIM_POL_ID, POL_STAT, POL_ID, SRC_KY
        FROM GXRDSDW.DIM_POLICY
        WHERE SRC = 'GLMS' AND SRC_KY = '{scenario_id}'
        """
       
        cursor.execute(query)
        result = cursor.fetchall()

        for row in result:
            prior_dim_pol_id = row[1] if row[1] is not None else 'NULL'
            print(f"DIM_POL_ID: {row[0]}, PRIOR_DIM_POL_ID: {prior_dim_pol_id}, POL_STAT: {row[2]}, POL_ID: {row[3]}")

            if prior_dim_pol_id == 'NULL' and row[2] == 'UNBOUND':
                rsop_value = "NAM_5219_PDI_UNBIND_REQUEST_RSOP_P1"
                # update_mongodb(row[4])
            elif prior_dim_pol_id == 'not null' and row[2] == 'BOUND':  
                rsop_value = "NAM_5219_PDI_UNBIND_REQUEST_RSOP_P2"
            else:
                rsop_value = "Assign to l2"
       
        cursor.close()
        connection.close()
        return rsop_value

    except cx_Oracle.DatabaseError as e:
        error, = e.args
        print(f"Oracle-Error-Code: {error.code}")
        print(f"Oracle-Error-Message: {error.message}")
    finally:
        return rsop_value

def update_mongodb(scenario_id):
    try:
        client = MongoClient('mongodb://localhost:27017/')
        db = client['NeuroDB_testing']
        collection = db['SOP_Filtering']

        filter_query = {
            "GEARID": 5219,
            "FilteredDiagnosticSOPID": "NAM_5219_PDI_UNBIND_REQUEST_DSOP",
            "Boundarycond3": "BOUND",
            "Boundarycond4": "Is null",
            # "SRC_KY": scenario_id
        }

        update_query = {
            "$set": {"highlight": "True"}
        }

        result = collection.update_many(filter_query, update_query)
        print(filter_query)
        print(update_query)
        print(f"Matched {result.matched_count} documents and modified {result.modified_count} documents.")

    except Exception as e:
        print(f"MongoDB error: {e}")

def save_to_excel(data, filename):
    # Convert the data to a DataFrame
    df = pd.DataFrame(data)
   
    # Save the DataFrame to an Excel file
    df.to_excel(filename, index=False)

def send_email_with_attachment(subject, body, to, attachment_path):
    # Create an instance of the Outlook application
    outlook = win32.Dispatch('outlook.application')
   
    # Create a new email
    mail = outlook.CreateItem(0)
   
    # Set email attributes
    mail.Subject = subject
    mail.Body = body
    mail.To = to
   
    # Attach the file
    mail.Attachments.Add(attachment_path)
   
    # Send the email
    mail.Send()
   
    print(f"Email sent to {to} with attachment {attachment_path}")

# # Example usage
# data = {"incident_No": "INC10921445"}
# test_incident(data)
Please plan for RDS DML to unbind the scenario- 373783 for the deal id- 189225

pop up------:
import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
from selenium.webdriver.common.alert import Alert
import pandas as pd
import win32com.client as win32
def test_incident(data):
   try:
       incident_number = data["incidentNo"]
       options = Options()
       options.add_argument("--window-size=1920,1080")
       driver = webdriver.Chrome(options=options)
       driver.maximize_window()
       url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
       driver.get(url)
       time.sleep(10)
       print(f"Navigated to incident number: {incident_number}")
       WebDriverWait(driver, 80).until(
           EC.presence_of_element_located((By.ID, "gsft_main"))
       )
       driver.switch_to.frame("gsft_main")
       print("found")
       WebDriverWait(driver, 80).until(
           EC.presence_of_element_located((By.ID, "incident.description"))
       )
       description_element = driver.find_element(By.ID, "incident.description")
       textarea_value = description_element.get_attribute("value")
       print("Description:", textarea_value)
       scenario_id_pattern = r"SCENARIO_ID\s*=\s*(\d+)"
       match = re.search(scenario_id_pattern, textarea_value)
       if match:
           scenario_id = match.group(1)
           print(f"Found SCENARIO_ID: {scenario_id}")
       else:
           print("No SCENARIO_ID found in the description.")
           # Inject JavaScript to create a popup and capture user input
           script = """
           var scenarioId = prompt("Please enter the SCENARIO_ID:");
           return scenarioId;
           """
           scenario_id = driver.execute_script(script)
           print(f"User provided SCENARIO_ID: {scenario_id}")
       table1_data, table2_data = execute_sql_query(scenario_id)
       if len(table1_data[0]) >= 1:
           save_to_excel(table1_data, "table1_data.xlsx")
           # Send the Excel file via email
           subject = "Table1 Data"
           body = "Please find the attached file containing Table1 data."
           to = "Shubhamsunil.Payghan@aig.com"
           attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
           send_email_with_attachment(subject, body, to, attachment_path)
   except Exception as e:
       print(f"An error occurred: {e}")
       table1_data, table2_data = [], []
   finally:
       driver.quit()
       if len(table1_data[0]) == 0:
           print("table data is empty")
           table1_data.pop()
           table1_data.append({
               "GEARID": "5219",
               "FilteredDiagnosticSOPID": "NA",
               "Boundarycond1": "NA",
               "Statevar1": "NA",
               "Boundarycond2": "NA",
               "Statevar2": "NA",
               "Boundarycond3": "NA",
               "Statevar3": "NA",
               "Boundarycond4": "NA",
               "Statevar4": "NA",
               "Boundarycond5": "NA",
               "Statevar5": "NA",
               "Boundarycond6": "NA",
               "Statevar6": "NA",
               "Boundarycond7": "NA",
               "Statevar7": "NA",
               "ResolutionSOPID": "Assign to L2"
           })
           save_to_excel(table1_data, "table1_data.xlsx")
           # Send the Excel file via email
           subject = "Table1 Data"
           body = "Please find the attached file containing Table1 data."
           to = "Shubhamsunil.Payghan@aig.com"
           attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
           send_email_with_attachment(subject, body, to, attachment_path)
       return table1_data, table2_data
def execute_sql_query(scenario_id):
   try:
       rsop_value = ""
       conn_str = (
           r'DRIVER={ODBC Driver 17 for SQL Server};'
           r'SERVER=PWGIDSGLSQ001,50110;'
           r'DATABASE=GLMS_GPPolicy_Prod;'
           r'Trusted_Connection=yes;'
           r'Connection Timeout=60;'
           r'MultiSubnetFailover=yes;'
       )
       conn = pyodbc.connect(conn_str)
       cursor = conn.cursor()
       sql_query = f"SELECT SCENARIO_ID, DLTD_IN, POL_STAT_TYP FROM GLMS_GPPolicy_Prod..TBATCH_LOG WHERE SCENARIO_ID = {scenario_id};"
       cursor.execute(sql_query)
       result = cursor.fetchone()
       if result and result.DLTD_IN == 'Y' and result.POL_STAT_TYP == 'Canceled':
           print(result)
           rsop_value = execute_oracle_query(scenario_id)
       else:
           print("DLTD_IN IS NOT = Y AND POL_STAT_TYP IS NOT = CANCELED")
       cursor.close()
       conn.close()
   except pyodbc.Error as e:
       print(f"Database error: {e}")
       rsop_value = "error occurred"
   finally:
       rsop = list(SOP_Filtering.find({"GEARID": 5219, "FilteredDiagnosticSOPID": "NAM_5219_PDI_UNBIND_REQUEST_DSOP"}, {"_id": 0}))
       for a in rsop:
           if a["ResolutionSOPID"] == rsop_value:
               a["highlight"] = "True"
           else:
               a["highlight"] = "False"
       highlighted_rsop = [a for a in rsop if a["highlight"] == "True"]
       if highlighted_rsop:
           highlighted_rsop = highlighted_rsop[0]
       else:
           highlighted_rsop = {}
       print(highlighted_rsop)
       return [highlighted_rsop], []  # Ensure the return value is always a list
def execute_oracle_query(scenario_id):
   try:
       os.environ['PATH'] = r'C:\Users\maahmad\Downloads\instantclient-basiclite-windows.x64-21.15.0.0.0dbru\instantclient_21_15' + ";" + os.environ['PATH']
       dsn_tns = cx_Oracle.makedsn('aigabec902-scan.r1-core.r1.aig.net', '1521', service_name='SGIGESP')
       connection = cx_Oracle.connect(user='MAAHMAD', password='EDAHCF9a=4b#CELI', dsn=dsn_tns)
       cursor = connection.cursor()
       query = f"""
       SELECT DIM_POL_ID, PRIOR_DIM_POL_ID, POL_STAT, POL_ID, SRC_KY
       FROM GXRDSDW.DIM_POLICY
       WHERE SRC = 'GLMS' AND SRC_KY = '{scenario_id}'
       """
       cursor.execute(query)
       result = cursor.fetchall()
       for row in result:
           prior_dim_pol_id = row[1] if row[1] is not None else 'NULL'
           print(f"DIM_POL_ID: {row[0]}, PRIOR_DIM_POL_ID: {prior_dim_pol_id}, POL_STAT: {row[2]}, POL_ID: {row[3]}")
           if prior_dim_pol_id == 'NULL' and row[2] == 'UNBOUND':
               rsop_value = "NAM_5219_PDI_UNBIND_REQUEST_RSOP_P1"
               # update_mongodb(row[4])
           elif prior_dim_pol_id == 'not null' and row[2] == 'BOUND':
               rsop_value = "NAM_5219_PDI_UNBIND_REQUEST_RSOP_P2"
           else:
               rsop_value = "Assign to l2"
       cursor.close()
       connection.close()
       return rsop_value
   except cx_Oracle.DatabaseError as e:
       error, = e.args
       print(f"Oracle-Error-Code: {error.code}")
       print(f"Oracle-Error-Message: {error.message}")
   finally:
       return rsop_value
def update_mongodb(scenario_id):
   try:
       client = MongoClient('mongodb://localhost:27017/')
       db = client['NeuroDB_testing']
       collection = db['SOP_Filtering']
       filter_query = {
           "GEARID": 5219,
           "FilteredDiagnosticSOPID": "NAM_5219_PDI_UNBIND_REQUEST_DSOP",
           "Boundarycond3": "BOUND",
           "Boundarycond4": "Is null",
           # "SRC_KY": scenario_id
       }
       update_query = {
           "$set": {"highlight": "True"}
       }
       result = collection.update_many(filter_query, update_query)
       print(filter_query)
       print(update_query)
       print(f"Matched {result.matched_count} documents and modified {result.modified_count} documents.")
   except Exception as e:
       print(f"MongoDB error: {e}")
def save_to_excel(data, filename):
   # Convert the data to a DataFrame
   df = pd.DataFrame(data)
   # Save the DataFrame to an Excel file
   df.to_excel(filename, index=False)
def send_email_with_attachment(subject, body, to, attachment_path):
   # Create an instance of the Outlook application
   outlook = win32.Dispatch('outlook.application')
   # Create a new email
   mail = outlook.CreateItem(0)
   # Set email attributes
   mail.Subject = subject
   mail.Body = body
   mail.To = to
   # Attach the file
   mail.Attachments.Add(attachment_path)
   # Send the email
   mail.Send()
   print(f"Email sent to {to} with attachment {attachment_path}")


mini---------------:
import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
import pandas as pd
import win32com.client as win32
def create_js_popup(driver, message):
   """
   Injects JavaScript to create a custom popup in the browser.
   Returns the user input.
   """
   js_code = f"""
   let userInput = prompt("{message}");
   return userInput;
   """
   return driver.execute_script(js_code)
def test_incident(data):
   try:
       incident_number = data["incidentNo"]
       options = Options()
       options.add_argument("--window-size=1920,1080")
       driver = webdriver.Chrome(options=options)
       driver.maximize_window()
       url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
       driver.get(url)
       time.sleep(10)
       print(f"Navigated to incident number: {incident_number}")
       WebDriverWait(driver, 80).until(
           EC.presence_of_element_located((By.ID, "gsft_main"))
       )
       driver.switch_to.frame("gsft_main")  
       print("found")
       WebDriverWait(driver, 80).until(
           EC.presence_of_element_located((By.ID, "incident.description"))
       )
       description_element = driver.find_element(By.ID, "incident.description")
       textarea_value = description_element.get_attribute("value")
       print("Description:", textarea_value)
       scenario_id_pattern = r"SCENARIO_ID\s*=\s*(\d+)"
       match = re.search(scenario_id_pattern, textarea_value)
       if match:
           scenario_id = match.group(1)
           print(f"Found SCENARIO_ID: {scenario_id}")
           table1_data, table2_data = execute_sql_query(scenario_id)
       else:
           print("No SCENARIO_ID found in the description.")
           # Use JavaScript to create a popup on the application UI
           scenario_id = create_js_popup(driver, "SCENARIO_ID not found. Please enter the SCENARIO_ID:")
           if scenario_id:
               print(f"User provided SCENARIO_ID: {scenario_id}")
               table1_data, table2_data = execute_sql_query(scenario_id)
           else:
               print("No SCENARIO_ID provided by the user.")
               table1_data, table2_data = [], []
       # Save table1_data to an Excel file
       if table1_data and len(table1_data[0]) >= 1:
           save_to_excel(table1_data, "table1_data.xlsx")
           # Send the Excel file via email
           subject = "Table1 Data"
           body = "Please find the attached file containing Table1 data."
           to = "Shubhamsunil.Payghan@aig.com"
           attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
           send_email_with_attachment(subject, body, to, attachment_path)
   except Exception as e:
       print(f"An error occurred: {e}")
       table1_data, table2_data = [], []
   finally:
       driver.quit()
       if not table1_data or len(table1_data[0]) == 0:
           print("table data is empty")
           table1_data = [{
              "GEARID": "5219",
              "FilteredDiagnosticSOPID": "NA",
              "Boundarycond1": "NA",
              "Statevar1": "NA",
              "Boundarycond2": "NA",
              "Statevar2": "NA",
              "Boundarycond3": "NA",
              "Statevar3": "NA",
              "Boundarycond4": "NA",
              "Statevar4": "NA",
              "Boundarycond5": "NA",
              "Statevar5": "NA",
              "Boundarycond6": "NA",
              "Statevar6": "NA",
              "Boundarycond7": "NA",
              "Statevar7": "NA",
              "ResolutionSOPID": "Assign to L2"
           }]
           save_to_excel(table1_data, "table1_data.xlsx")
           # Send the Excel file via email
           subject = "Table1 Data"
           body = "Please find the attached file containing Table1 data."
           to = "Shubhamsunil.Payghan@aig.com"
           attachment_path = r"C:\Users\maahmad\MAAZ\React\React\myapp\build\table1_data.xlsx"
           send_email_with_attachment(subject, body, to, attachment_path)
       return table1_data, table2_data
# Rest of the functions (execute_sql_query, execute_oracle_query, update_mongodb, save_to_excel, send_email_with_attachment) remain unchanged.
