import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
from selenium.webdriver.common.alert import Alert
import pandas as pd
import win32com.client as win32
import tkinter as tk
from tkinter import simpledialog
from datetime import datetime

# Function to get the incident number from the user via a pop-up dialog
def get_incident_number():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    incident_number = simpledialog.askstring("Input", "Please enter the Incident Number:")
    return incident_number

def test_incident():
    try:
        # Get the incident number from the user if not passed in data
        incident_number = get_incident_number()

        if not incident_number:
            print("Incident number not provided.")
            return []

        options = Options()
        options.add_argument("--window-size=1920,1080")
        driver = webdriver.Chrome(options=options)
        driver.maximize_window()
        url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
        driver.get(url)
        time.sleep(10)
        print(f"Navigated to incident number: {incident_number}")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "gsft_main"))
        )
        driver.switch_to.frame("gsft_main")
        print("found")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "incident.description"))
        )
        description_element = driver.find_element(By.ID, "incident.description")
        textarea_value = description_element.get_attribute("value")
        print("Description:", textarea_value)

        # Adjusted pattern to match "Submission No#"
        submission_number_pattern = r"submission\s*no#?\s*(\d+)"
        match = re.search(submission_number_pattern, textarea_value, re.IGNORECASE)

        if match:
            submission_number = match.group(1)
            print(f"Found Submission No#: {submission_number}")
            # Call the function to execute the SQL query with the submission number
            execute_sql_query(submission_number)

    except Exception as e:
        print(f"An error occurred: {e}")

def execute_sql_query(submission_number):
    try:
        rsop_value = ""

        conn_str = (
            r'DRIVER={ODBC Driver 17 for SQL Server};'
            r'SERVER=PWGIDSGLSQ001,50110;'  
            r'DATABASE=GLMS_GPPolicy_Prod;'
            r'Trusted_Connection=yes;'
            r'Connection Timeout=60;'
            r'MultiSubnetFailover=yes;'
        )

        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        sql_query = f"""select  top 1 SUBMSN_NO ,Deal_id ,DEAL_STAT_REF_ID,TRNS_CMPNT_ID ,TRNS_TYPE_NM ,
cast(t.EFF_DT as date) as "Endorsement Effective Date" ,t.ORIG_PLCY_EFF_DT as "Effective Date",
cast(t.EXP_DT as date) as  "Expiry Date" from GLMS_GPPolicy_Prod.dbo.TDEAL t with (nolock)
where t.SUBMSN_NO={submission_number} order by t.DEAL_ID desc;"""
        cursor.execute(sql_query)

        result = cursor.fetchone()
        if result:
            print("SQL Query Result:", result)
        else:
            print("No results found for the given submission number.")

    except Exception as e:
        print(f"An error occurred while executing the SQL query: {e}")

# Call the function to test
test_incident()
