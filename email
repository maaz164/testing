import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
from selenium.webdriver.common.alert import Alert
import pandas as pd
import win32com.client as win32
import tkinter as tk
from tkinter import simpledialog
from datetime import datetime

# Function to get the incident number from the user via a pop-up dialog
def get_incident_number():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    incident_number = simpledialog.askstring("Input", "Please enter the Incident Number:")
    return incident_number

def test_incident():
    try:
        # Get the incident number from the user if not passed in data
        incident_number = get_incident_number()

        if not incident_number:
            print("Incident number not provided.")
            return []

        options = Options()
        options.add_argument("--window-size=1920,1080")
        driver = webdriver.Chrome(options=options)
        driver.maximize_window()
        url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
        driver.get(url)
        time.sleep(10)
        print(f"Navigated to incident number: {incident_number}")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "gsft_main"))
        )
        driver.switch_to.frame("gsft_main")
        print("found")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "incident.description"))
        )
        description_element = driver.find_element(By.ID, "incident.description")
        textarea_value = description_element.get_attribute("value")
        print("Description:", textarea_value)

        # Adjusted pattern to match "Submission No#"
        submission_number_pattern = r"submission\s*no#?\s*(\d+)"
        match = re.search(submission_number_pattern, textarea_value, re.IGNORECASE)

        if match:
            submission_number = match.group(1)
            print(f"Found Submission No#: {submission_number}")
            # Call the function to execute the SQL query with the submission number
            execute_sql_query(submission_number)

    except Exception as e:
        print(f"An error occurred: {e}")

def execute_sql_query(submission_number):
    try:
        rsop_value = ""

        conn_str = (
            r'DRIVER={ODBC Driver 17 for SQL Server};'
            r'SERVER=PWGIDSGLSQ001,50110;'  
            r'DATABASE=GLMS_GPPolicy_Prod;'
            r'Trusted_Connection=yes;'
            r'Connection Timeout=60;'
            r'MultiSubnetFailover=yes;'
        )

        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        sql_query = f"""SELECT TOP 1 t.deal_id, TRNS_TYPE_NM 
FROM GLMS_GPPolicy_Prod.dbo.TDEAL t WITH (NOLOCK)
WHERE t.SUBMSN_NO = 'YOUR_SUBMISSION_NUMBER' 
ORDER BY t.DEAL_ID DESC;"""
        cursor.execute(sql_query)

        result = cursor.fetchone()
        if result:
            print("SQL Query Result:", result)
        else:
            print("No results found for the given submission number.")

-----------1
import re
import cx_Oracle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import pyodbc
import os
from pymongo import MongoClient
from config import SOP_Filtering
from selenium.webdriver.common.alert import Alert
import pandas as pd
import win32com.client as win32
import tkinter as tk
from tkinter import simpledialog
from datetime import datetime

# Function to get the incident number from the user via a pop-up dialog
def get_incident_number():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    incident_number = simpledialog.askstring("Input", "Please enter the Incident Number:")
    return incident_number

def get_submission_number():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    submission_number = simpledialog.askstring("Input", "Please enter the Submission Number:")
    return submission_number

def get_user_date():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    user_date = simpledialog.askstring("Input", "Please enter a date (YYYY-MM-DD):")
    return user_date

def test_incident():
    try:
        # Get the incident number from the user if not passed in data
        incident_number = get_incident_number()

        if not incident_number:
            print("Incident number not provided.")
            return []

        options = Options()
        options.add_argument("--window-size=1920,1080")
        driver = webdriver.Chrome(options=options)
        driver.maximize_window()
        url = f"https://aig.service-now.com/nav_to.do?uri=%2Fincident.do%3Fsysparm_query%3Dnumber%3D{incident_number}"
        driver.get(url)
        time.sleep(10)
        print(f"Navigated to incident number: {incident_number}")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "gsft_main"))
        )
        driver.switch_to.frame("gsft_main")
        print("found")

        WebDriverWait(driver, 80).until(
            EC.presence_of_element_located((By.ID, "incident.description"))
        )
        description_element = driver.find_element(By.ID, "incident.description")
        textarea_value = description_element.get_attribute("value")
        print("Description:", textarea_value)

        # Adjusted pattern to match "Submission No#"
        submission_number_pattern = r"submission\s*no#?\s*(\d+)"
        match = re.search(submission_number_pattern, textarea_value, re.IGNORECASE)

        if match:
            submission_number = match.group(1)
            print(f"Found Submission No#: {submission_number}")
        else:
            submission_number = get_submission_number()
            if not submission_number:
                print("Submission number not provided.")
                return []

        # Call the function to execute the SQL query with the submission number
        execute_sql_query(submission_number)

    except Exception as e:
        print(f"An error occurred: {e}")

def execute_sql_query(submission_number):
    try:
        conn_str = (
            r'DRIVER={ODBC Driver 17 for SQL Server};'
            r'SERVER=PWGIDSGLSQ001,50110;'  
            r'DATABASE=GLMS_GPPolicy_Prod;'
            r'Trusted_Connection=yes;'
            r'Connection Timeout=60;'
            r'MultiSubnetFailover=yes;'
        )

        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        # First query
        sql_query_1 = f"""SELECT TOP 1 t.deal_id, TRNS_TYPE_NM 
FROM GLMS_GPPolicy_Prod.dbo.TDEAL t WITH (NOLOCK)
WHERE t.SUBMSN_NO = '{submission_number}' 
ORDER BY t.DEAL_ID DESC;"""
        cursor.execute(sql_query_1)
        result_1 = cursor.fetchone()
        if result_1:
            print("SQL Query 1 Result:", result_1)
        else:
            print("No results found for the given submission number in Query 1.")

        # Second query
        sql_query_2 = f"""SELECT TOP 1 deal_id, DEAL_STAT_REF_ID 
FROM GLMS_GPPolicy_Prod.dbo.TDEAL t WITH (NOLOCK)
WHERE t.SUBMSN_NO = '{submission_number}' 
ORDER BY t.DEAL_ID DESC;"""
        cursor.execute(sql_query_2)
        result_2 = cursor.fetchone()
        if result_2:
            print("SQL Query 2 Result:", result_2)
        else:
            print("No results found for the given submission number in Query 2.")

        # Prompt the user to enter a date before executing query 3
        user_date_str = get_user_date()
        user_date = datetime.strptime(user_date_str, "%Y-%m-%d").date()

        # Third query
        sql_query_3 = f"""SELECT TOP 1 Deal_id, CAST(t.EXP_DT AS DATE) AS "Expiry Date" 
FROM GLMS_GPPolicy_Prod.dbo.TDEAL t WITH (NOLOCK)
WHERE t.SUBMSN_NO = '{submission_number}' 
ORDER BY t.DEAL_ID DESC;"""
        cursor.execute(sql_query_3)
        result_3 = cursor.fetchone()
        if result_3:
            expiry_date = result_3[1]
            print("SQL Query 3 Result:", result_3)
            print(f"User Entered Date: {user_date}")
            print(f"Expiry Date from Query: {expiry_date}")

            # Compare dates
            if user_date > expiry_date:
                print("User entered date is after the expiry date.")
            elif user_date < expiry_date:
                print("User entered date is before the expiry date.")
            else:
                print("User entered date is the same as the expiry date.")
        else:
            print("No results found for the given submission number in Query 3.")

    except Exception as e:
        print(f"An error occurred while executing the SQL query: {e}")

# Call the function to test
test_incident()

    except Exception as e:
        print(f"An error occurred while executing the SQL query: {e}")

# Call the function to test
test_incident()
