import json
from flask.wrappers import Response
import subprocess
import os
import SmartQueue
from flask import Flask, request
from flask import Flask, render_template, jsonify
import pymongo
import DiagonosticSOP
from config import Resolved_Dump, Tdump_collection, applications_collection, server_collection, tsm_collection, SOP_collection, SmartOpsQueueCollection, AddSOP_list
from pymongo import MongoClient
import pandas as pd
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from createincident import create_incident
from APAC_1217_HK_MOTIS_PAYMENT_STATUS_DSOP_1 import Execute_ResolutionSOP, SOP_Filtering, getsopdetails
from NAM_5122_PC_Memory_Utilization_DSOP import src,test
from check_navigation import checknav
from update_nav import UpdateNavigation
from SmartopsKPI import smartopskpidata, get_resolved_incidents
from SmartopsKPIsr import run_KPI
from NAM_5219_UNBIND_REQUEST_DSOP import test_incident


app = Flask(__name__)


def Count_of_Apps():
    Ali = []
    for doc in applications_collection.find({"Cognizant Scope": "In-Scope"}):
        Ali.append(doc)
    No_of_Apps = len(Ali)
    return No_of_Apps


def Monitored_apps():
    li = []
    for doc in applications_collection.find({"Monitoring ": "Y"}):
        li.append(doc)
    num_of_Monitored = len(li)
    total = Count_of_Apps()
    percent = round((num_of_Monitored/total)*100)
    return percent


def critical_apps():
    critical_list = []
    for doc in applications_collection.find({"Business Critical": "Low"}):
        critical_list.append(doc)
    No_of_Critical_apps = len(critical_list)
    return No_of_Critical_apps

# We are getting total number of open ticket using State field from "Tdump" collection from NeuroDB database with all the possible as well as availabe inputs


def open_ticket():
    valid_state = ["New", "On Hold", "In Progress"]
    open_ticket_list = []
    for doc in Tdump_collection.find({"State": {"$in": valid_state}}):
        open_ticket_list.append(doc)
    return len(open_ticket_list)


def reopen_ticket():
    reopen_ticket_list = []
    valid_state = ["New", "On Hold", "In Progress"]
    for doc in Tdump_collection.find({"State": {"$in": valid_state}, "Resolved": {"$exists": True, "$ne": None}}):
        reopen_ticket_list.append(doc)
    return len(reopen_ticket_list)

# We are getting total number of closed ticket using State field from "Tdump" collection from NeuroDB database with all the possible as well as availabe inputs


def closed_ticket():
    valid_state = ["Closed", "Canceled", "Resolved"]
    closed_ticket_list = []
    for doc in Tdump_collection.find({"State": {"$in": valid_state}}):
        closed_ticket_list.append(doc)
    return len(closed_ticket_list)


def tickets():
    # total_incident = incident()
    total_open_tickets = open_ticket()
    total_closed_tickets = closed_ticket()
    total_tickets = total_open_tickets+total_closed_tickets
    return total_tickets


def incident_percentage():
    # total_incident = incident()
    total_open_tickets = open_ticket()
    Total_tickets = tickets()
    Tpercent = round((total_open_tickets/Total_tickets)*100)
    return Tpercent


def count_serv(app_name):
    tsm_data = list(tsm_collection.find(
        {"Applications": app_name}, {'_id': 0}))
    mapped_servers = set()
    for entry in tsm_data:
        server_name = entry['SName']
        if server_name not in mapped_servers:
            mapped_servers.add(server_name)
    count = len(mapped_servers)
    return count


def calc_cpu(app_name):
    tsm_data = list(tsm_collection.find(
        {"Applications": app_name}, {'_id': 0}))
    mapped_servers = set()
    for entry in tsm_data:
        server_name = entry['SName']
        if server_name not in mapped_servers:
            mapped_servers.add(server_name)
    count_apac = len(mapped_servers)
    cpu_sum = 0
    for server_name in mapped_servers:
        server_info = list(server_collection.find({'ServerName': server_name}))
        cpu_sum += sum([doc['%CPU']for doc in server_info])
        avg_cpu_utilization = cpu_sum/count_apac
    return round(avg_cpu_utilization, 2)


def calc_mem(app_name):
    tsm_data = list(tsm_collection.find(
        {"Applications": app_name}, {'_id': 0}))
    mapped_servers = set()
    for entry in tsm_data:
        server_name = entry['SName']
        if server_name not in mapped_servers:
            mapped_servers.add(server_name)
    count = len(mapped_servers)
    mem_sum = 0
    for server_name in mapped_servers:
        server_info = list(server_collection.find({'ServerName': server_name}))
        mem_sum += sum([doc['%MEM']for doc in server_info])
        avg_mem_utilization = mem_sum/count
    return round(avg_mem_utilization, 2)


@app.route('/app_health_data')
def get_app_health_data():
    app_names = applications_collection.distinct("Client Segment")
    data = []

    for app_name in app_names:
        num_apps = applications_collection.count_documents(
            {"Client Segment": app_name})
        server_count = count_serv(app_name)
        mem_util = calc_mem(app_name)
        cpu_util = calc_cpu(app_name)
        data.append({
                    'Geography': app_name,
                    'No. of Applications': num_apps,
                    'Application Status': "",
                    'Servers': server_count,
                    'Memory usage': mem_util,
                    'CPU usage': cpu_util
                    })

    return jsonify(data)


# Route for homepage


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def catch_all(path):

    return render_template('index.html')


@app.route('/create_incident')
def create_new_incident():
    incident_output = create_incident()
    return jsonify({'output': incident_output})


@app.route('/get_incident', methods=['POST'])
def get_incident_route():
    incident_number = request.json.get('incident_number')
    if incident_number:
        import getincident
        getincident.get_incident(incident_number)
        return jsonify({'message': f"Incident {incident_number} processed successfully"})
    else:
        return jsonify({'message': 'Invalid incident number'})


@app.route('/data')
def getData():

    Mon = Monitored_apps()
    Count = Count_of_Apps()
    Critical = critical_apps()
    Topen = open_ticket()
    Treopen = reopen_ticket()
    Tclosed = closed_ticket()
    # Tincident=incident()
    Tticket = tickets()
    TIpercent = incident_percentage()

    return {

        "Number_of_Monitored_apps": Mon,
        "No_of_apps": Count,
        "No_of_Critical_apps": Critical,
        "No_of_Open_Ticket": Topen,
        "No_of_Reopen_Ticket": Treopen,
        "No_of_Closed_Ticket": Tclosed,
        # "No_of_Incidents": Tincident,
        "Total_Ticket": Tticket,
        "Incident_percent": TIpercent


    }


def triggerbatchfile(diaSOP, policyNo):
    parameter1 = " "+diaSOP+" "+policyNo+" "+diaSOP+"_"+policyNo
    path_batch = "C:\\Users\\maahmad\\MAAZ\\React\\React\\python-3.7.7_v1.3_\\python-3.7.7_v1.3_\\BATCH_FILE\\" + \
        diaSOP+".bat"+parameter1
    check_batch_run = os.system(path_batch)
    print("check batch run", check_batch_run)


@app.route('/SOP', methods=['POST'])
def check_keywords():
    data = request.json
    gear_id = int(data["gear_id"])
    description = data["description"]
    print(gear_id, description)
    diagonstic_sop, mandatory_type, automation_available = DiagonosticSOP.check_keywords1(
        gear_id, description)
    # print(diagonstic_sop, mandatory_type)
    return jsonify({"status": True, "diagonstic_sop": diagonstic_sop, "mandatory_type": mandatory_type, "automation_available": automation_available})


@app.route('/RSOP', methods=['POST'])
def check_rsop():
    data = request.json
    print(data)
    gear_id = int(data["gear_id"])
    diaSOP = data["diaSOP"].replace("SOP name is: ", "").strip()
    
    #for all the new automations of different dsop's add your logic in the elif block of the below code 
    table1_data=[]
    table2_data=[]
    
    if diaSOP == "APAC_1217_HK_MOTIS_PAYMENT_STATUS_DSOP_1":
        policyNo = data["mandatoryInput"]
        triggerbatchfile(diaSOP, policyNo)
        table2_data, table1_data = Execute_ResolutionSOP(policyNo, gear_id, diaSOP)
    
    elif diaSOP == "NAM_5219_PDI_UNBIND_REQUEST_DSOP":
        SCENARIOID = data["mandatoryInput"]
        #call automation code here
        print(SCENARIOID)
        table1_data,table2_data=test_incident(data)
        
    # automation output should be like line 272 dictionary
    # {"table1_data": table1_data, "table2_data": table2_data} 
    
    print({"table1_data": table1_data, "table2_data": table2_data})
    
    return jsonify({"table1_data": table1_data, "table2_data": table2_data})


@app.route('/api/data',
           methods=['GET'])
def get_data():
    SmartQueue.get_incident()
    data = list(SmartOpsQueueCollection.find(
        {}, {'_id': 0, }).sort({"sop_available": -1}). limit(300))
    # print(data)
    return jsonify(data)


@app.route('/api/diagnosticSOPData', methods=['GET'])
def get_diagnostic_sop_data():
    try:
        data = list(AddSOP_list.find({}, {'_id': 0}))
        return jsonify(data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/check/nav', methods=['POST'])
def check_navig():
    data = request.json
    ticketNo = data["ticketNo"]
    text = "Yes"
    UpdateNavigation(ticketNo, text)
    result = checknav()
    print(result)
    return jsonify(result)


@app.route("/api/manualdata", methods=["POST"])
def enterdatamanually():
    data = request.json
    diasop = data["diasop"].replace("SOP name is:", "").strip()
    print(diasop)
    query = {"FilteredDiagnosticSOPID": diasop}
    results = list(SOP_Filtering.find(query, {"_id": 0, "ApplicationName": 0, "Keyword": 0, "Category1": 0,
                   "Category2": 0, "Category3": 0, "MandatoryInformation": 0, "CommonDescriptionofSOP": 0}))
    # print(results)
    for result in results:
        boundcond1 = result["Boundarycond1"]
        boundcond2 = result["Boundarycond2"]
        boundcond3 = result["Boundarycond3"]
        boundcond4 = result["Boundarycond4"]
        boundcond5 = result["Boundarycond5"]
        boundcond6 = result["Boundarycond6"]
        boundcond7 = result["Boundarycond7"]
        statevar1 = result["Statevar1"]
        statevar2 = result["Statevar2"]
        statevar3 = result["Statevar3"]
        statevar4 = result["Statevar4"]
        statevar5 = result["Statevar5"]
        statevar6 = result["Statevar6"]
        statevar7 = result["Statevar7"]

        if isinstance(boundcond1, int):
            bouncond1 = str(boundcond1)

        if statevar1 == "-":
            result['Statevar1'] = "NA"
        if statevar2 == "-":
            result['Statevar2'] = "NA"
        if statevar3 == "-":
            result['Statevar3'] = "NA"
        if statevar4 == "-":
            result['Statevar4'] = "NA"
        if statevar5 == "-":
            result['Statevar5'] = "NA"
        if statevar6 == "-":
            result['Statevar6'] = "NA"
        if statevar7 == "-":
            result['Statevar7'] = "NA"

        if isinstance(boundcond1, str):
            if boundcond1 == "-":
                result['Boundarycond1'] = "NA"
            else:
                boundcond1 = boundcond1.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond1 = boundcond1.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond1 = boundcond1.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond1 = boundcond1.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond1 = boundcond1.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond1 = boundcond1.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")

                if boundcond1 == "N/A" or boundcond1 == "N, A" or boundcond1 == "N,A":
                    boundcond1 = "NA"
                else:
                    boundcond1 = boundcond1.strip().replace("/", ", ")

                result["Boundarycond1"] = boundcond1
        else:
            result["Boundarycond1"] = str(boundcond1)

        if isinstance(boundcond2, str):
            if boundcond2 == "-":
                result["Boundarycond2"] = "NA"
            else:
                boundcond2 = boundcond2.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond2 = boundcond2.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond2 = boundcond2.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond2 = boundcond2.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond2 = boundcond2.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond2 = boundcond2.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")

                if boundcond2 == "N/A" or boundcond2 == "N, A" or boundcond2 == "N,A":
                    boundcond2 = "NA"
                else:
                    boundcond2 = boundcond2.strip().replace("/", ", ")

                result["Boundarycond2"] = boundcond2
        else:
            result["Boundarycond2"] = str(boundcond2)

        if isinstance(boundcond3, str):
            if boundcond3 == "-":
                result['Boundarycond3'] = "NA"
            else:
                boundcond3 = boundcond3.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond3 = boundcond3.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond3 = boundcond3.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond3 = boundcond3.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond3 = boundcond3.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond3 = boundcond3.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")

                if boundcond3 == "N/A" or boundcond3 == "N, A" or boundcond3 == "N,A":
                    boundcond3 = "NA"
                else:
                    boundcond3 = boundcond3.strip().replace("/", ", ")

                result["Boundarycond3"] = boundcond3
        else:
            result["Boundarycond3"] = str(boundcond3)

        if isinstance(boundcond4, str):
            if boundcond4 == "-":
                result['Boundarycond4'] = "NA"
            else:
                boundcond4 = boundcond4.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond4 = boundcond4.strip().replace(
                    " and ", ", ").replace('“', "").replace('”', "")
                boundcond4 = boundcond4.strip().replace(
                    " or ", ", ").replace('“', "").replace('”', "")
                boundcond4 = boundcond4.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond4 = boundcond4.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond4 = boundcond4.strip().replace(
                    "\nand\n", ", ").replace('“', "").replace('”', "")
                boundcond4 = boundcond4.strip().replace("/", ", ")

                if boundcond4 == "N/A" or boundcond4 == "N, A" or boundcond4 == "N,A":
                    boundcond4 = "NA"
                else:
                    boundcond4 = boundcond4.strip().replace("/", ", ")

                result["Boundarycond4"] = boundcond4

        else:
            result["Boundarycond4"] = str(boundcond4)

        if isinstance(boundcond5, str):
            if boundcond5 == "-":
                result['Boundarycond5'] = "NA"
            else:
                boundcond5 = boundcond5.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")
                boundcond5 = boundcond5.strip().replace("/", ", ")

                if boundcond5 == "N/A" or boundcond5 == "N, A" or boundcond5 == "N,A":
                    boundcond5 = "NA"
                else:
                    boundcond5 = boundcond5.strip().replace("/", ", ")

                result["Boundarycond5"] = boundcond5
        else:
            result["Boundarycond5"] = str(boundcond5)

        if isinstance(boundcond6, str):
            if boundcond6 == "-":
                result['Boundarycond6'] = "NA"
            else:
                boundcond6 = boundcond6.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")
                boundcond6 = boundcond6.strip().replace("/", ", ")

                if boundcond6 == "N/A" or boundcond6 == "N, A" or boundcond6 == "N,A":
                    boundcond6 = "NA"
                else:
                    boundcond6 = boundcond6.strip().replace("/", ", ")

                result["Boundarycond6"] = boundcond6
        else:
            result["Boundarycond6"] = str(boundcond6)

        if isinstance(boundcond7, str):
            if boundcond7 == "-":
                result['Boundarycond7'] = "NA"
            else:
                boundcond7 = boundcond7.strip().replace(
                    " Or ", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace(
                    " and ", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace(
                    " or ", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace(
                    " AND ", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace(
                    " OR ", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace(
                    "\nand\n", ", ").replace('“', " ").replace('”', " ")
                boundcond7 = boundcond7.strip().replace("/", ", ")

                if boundcond7 == "N/A" or boundcond7 == "N, A" or boundcond7 == "N,A":
                    boundcond7 = "NA"
                else:
                    boundcond7 = boundcond7.strip().replace("/", ", ")

                result["Boundarycond7"] = boundcond7
        else:
            result["Boundarycond7"] = str(boundcond7)

    print(results)
    return jsonify(results)


@app.route("/api/insertdatadiagnostic", methods=["POST"])
def enterdatadiagonstic():
    data = request.json
    print(data)
    client = MongoClient("mongodb://localhost:27017/")
    db = client.NeuroDB
    datadiagnostic = db.Diagnostics_Data

    try:
        del data["ApplicationName"]
        del data["Category1"]
        del data["Category2"]
        del data["Category3"]
        del data["CommonDescriptionofSOP"]
        del data["Keyword"]
        # del data["MandatoryInformation"]
        del data["highlight"]
        data["Resolution Automation"] = "TBD"
        data["source"] = "TBD"
        result = datadiagnostic.insert_one(data)
        return jsonify({"result": str(result.inserted_id)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/saveData', methods=["POST"])
def save_data():
    data = request.json
    client = MongoClient("mongodb://localhost:27017/")
    db = client.NeuroDB
    SOP_Filtering = db.SOP_Filtering
    count = 1
    query = {}

    for key, value in data.items():
        if key == 'FilteredDiagnosticSOPID':
            query[key] = value.replace("SOP name is:", " ").strip()
        elif key == 'GEARID':
            query[key] = int(value)
        else:
            query[f'Statevar{count}'] = key
            query[f'Boundarycond{count}'] = value

        count += 1
    print(query)
    try:
        result = list(SOP_Filtering.find(query, {"_id": 0}))
        gearid = query['GEARID']
        diasop = query['FilteredDiagnosticSOPID']
        data = getsopdetails(result, gearid, diasop)
        return jsonify({"Status": "True", "tabledata": data})
    except Exception as e:
        print("Exception ", e)
        return jsonify({"Status": str(e)}), 500


@app.route('/api/insetdatasmartque', methods=['GET'])
def get_smartque_data():
    try:
        data = list(SmartOpsQueueCollection.find({}, {'_id': 0}))
        return jsonify(data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/resolvedincidents', methods=['GET'])
def get_resolvedincidents():
    try:
        # incident_data = get_resolved_incidents()
        # kpidata, totaldata = smartopskpidata(incident_data)
        data = run_KPI()
        return jsonify(data)
        # return jsonify({"kpidata": kpidata, "totaldata": totaldata})

    except Exception as e:
        print("Exception", e)
        return jsonify({'kpidata': [], 'totaldata': []})


@app.route('/api/filterdata', methods=['POST'])
def get_filtereddata():
    try:
        data = request.json
        print(data)
        result = {"Status": "True"}
        return jsonify(result)
    except Exception as e:
        print(e)
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
